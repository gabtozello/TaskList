

// import { getTarefas, toggleConclusao } from "./backend/api.js";

// function App() {
//   const [tarefas, setTarefas] = useState([]); {/* Lista de tarefas */}  
//   const [mostrarForm, setMostrarForm] = useState(false); {/*Formulario de nova tarefa*/}
//   const [titulo, setTitulo] = useState("");
//   const [descricao, setDescricao] = useState("");
//   const [categoria, setCategoria] = useState("");
//   const [listaCategorias, setListaCategorias] = useState(["Estudos", "Trabalho", "Pessoal"]);
//   const [novaCategoria, setNovaCategoria] = useState("");
//   const [cor, setCor] = useState("verde");
//   const [criadaEm, setCriadaEm] = useState("");

//   useEffect(() => {
//     carregarTarefas();
//   }, []);

//   const carregarTarefas = async () => {
//     const data = await getTarefas();
//     setTarefas(data);
//   };

//   const handleToggle = async (titulo) => {
//     await toggleConclusao(titulo);
//     carregarTarefas();
//   };

//   const handleAbrirForm = () => {
//     setCriadaEm(new Date().toLocaleString());
//     setMostrarForm(true);
//   };

//   const handleAdicionar = async (e) => {
//     e.preventDefault();
//     if (!titulo.trim()) return;

//     const categoriaFinal = novaCategoria.trim()
//       ? novaCategoria.trim()
//       : categoria || "Sem categoria";

//     // Adiciona nova categoria √† lista se for criada
//     if (novaCategoria && !listaCategorias.includes(novaCategoria.trim())) {
//       setListaCategorias([...categorias, novaCategoria.trim()]);
//     }

//     await addTarefa(titulo, categoriaFinal); // voc√™ pode adaptar para incluir mais dados

//     setTitulo("");
//     setDescricao("");
//     setCategoria("");
//     setNovaCategoria("");
//     setCor("verde");
//     setCriadaEm("");
//     setMostrarForm(false);
//     carregarTarefas();
//   };

//   return (
//     <div style={{ padding: "2rem", fontFamily: "sans-serif", maxWidth: "600px", margin: "auto", position: "relative" }}>
//       <h1>üìã Lista de Tarefas</h1>

//       <button
//         onClick={handleAbrirForm}
//         style={{
//           padding: "0.5rem 1rem",
//           marginBottom: "1rem",
//           backgroundColor: "#007bff",
//           color: "#fff",
//           border: "none",
//           borderRadius: "5px"
//         }}
//       >
//         ‚ûï Nova Tarefa
//     </button>

// {/* Formulario para cadastro de novas tarefas */}  
//       {mostrarForm && (
//         <div style={{
//           position: "fixed",
//           top: "50%",
//           left: "50%",
//           transform: "translate(-50%, -50%)",
//           backgroundColor: "#fff",
//           border: "1px solid #ccc",
//           borderRadius: "8px",
//           padding: "1.5rem",
//           boxShadow: "0 0 10px rgba(0,0,0,0.3)",
//           zIndex: 999,
//           width: "90%",
//           maxWidth: "400px"
//         }}>
//           <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
//             <h2>Nova Tarefa</h2>
//             <button onClick={() => setMostrarForm(false)} style={{ fontSize: "1.2rem", border: "none", background: "none" }}>‚ùå</button>
//           </div>
//           <form onSubmit={handleAdicionar}>
//             <label>T√≠tulo:</label>
//             <input
//               type="text"
//               value={titulo}
//               onChange={(e) => setTitulo(e.target.value)}
//               required
//               style={{ width: "100%", marginBottom: "1rem", padding: "0.5rem" }}
//             />
//             <label>Descri√ß√£o:</label>
//             <textarea
//               value={descricao}
//               onChange={(e) => setDescricao(e.target.value)}
//               style={{ width: "100%", marginBottom: "1rem", padding: "0.5rem" }}
//               rows={3}
//             />
//             <label>Categoria existente:</label>
//             <select
//               value={categoria}
//               onChange={(e) => setListaCategoria(e.target.value)}
//               style={{ width: "100%", marginBottom: "1rem", padding: "0.5rem" }}
//             >
//               <option value="">-- Selecione --</option>
//               {categorias.map((cat) => (
//                 <option key={cat} value={cat}>{cat}</option>
//               ))}
//             </select>

//             <label>Ou crie nova categoria:</label>
//             <input
//               type="text"
//               value={novaCategoria}
//               onChange={(e) => setNovaCategoria(e.target.value)}
//               placeholder="Nova categoria"
//               style={{ width: "100%", marginBottom: "1rem", padding: "0.5rem" }}
//             />

//             <label>Prioridade:</label>
//             <div style={{marginBottom: "1rem" }}>
//               <button 
//                 type="button" 
//                 onClick={() => setPrioridade(!prioridade)} 
//                 style={{ 
//                   backgroundColor: "red", 
//                   color: "#fff", 
//                   padding: "0.5rem", 
//                   border: cor === "vermelho" ? "3px solid #000" : "none" }}>Prioridade</button>
//             </div>

//             <button type="submit" style={{ padding: "0.5rem 1rem", backgroundColor: "#007bff", color: "#fff", border: "none", borderRadius: "5px" }}>
//               Adicionar Tarefa
//             </button>
//           </form>
//         </div>
//       )}

//       {/* Lista de tarefas */}
//       {tarefas.map((tarefa) => (
//         <div
//           key={tarefa.titulo}
//           style={{
//             marginBottom: "1rem",
//             padding: "1rem",
//             backgroundColor:
//               tarefa.cor === "vermelho" ? "#f8d7da" :
//               tarefa.cor === "laranja" ? "#fff3cd" : "#f2f2f2",
//             borderRadius: "5px"
//           }}
//         >
//           <input
//             type="checkbox"
//             checked={tarefa.concluida}
//             onChange={() => handleToggle(tarefa.titulo)}
//           />
//           <span style={{
//             marginLeft: "0.5rem",
//             textDecoration: tarefa.concluida ? "line-through" : "none"
//           }}>
//             <strong>{tarefa.titulo}</strong> ‚Äî <i>{tarefa.categoria}</i><br />
//             {tarefa.descricao}
//           </span>
//         </div>
//       ))}
//     </div>
//   );
// }

// export default App;






/* import { useState, useEffect } from "react";
import axios from "axios";

function App() {
  const [usuarios, setUsuarios] = useState([]);
  const [novoNome, setNovoNome] = useState("");
  //Dados da API
  useEffect(() => {
    const fetchApi = async () => {
      try {
        const response = await axios.get("http://127.0.0.1:8080/api/users");
        console.log(response.data.users);
        setUsuarios(response.data.users)
      } catch (error) {
        console.error("Erro ao buscar API:", error);
      }
    };
    fetchApi()
  }, []);
  const adicionarUsuario = async () => {
    if (novoNome.trim() === "") return;

    try {
      const response = await axios.post("http://127.0.0.1:8080/api/users", {
        nome: novoNome,
      });

      // Se quiser atualizar com a resposta do backend:
      setUsuarios([...usuarios, response.data.usuario || novoNome]);

      // Ou s√≥ recarregar a lista do backend novamente:
      const res = await axios.get("http://127.0.0.1:8080/api/users");
      setUsuarios(res.data.users);

      setNovoNome("");
    } catch (error) {
      console.error("Erro ao adicionar usu√°rio:", error);
    }
  };

  return (
    <div>
      <h1>Lista de Usu√°rios</h1>
      <input
        type="text"
        placeholder="Digite um nome"
        value={novoNome}
        onChange={(e) => setNovoNome(e.target.value)}
        style={{ padding: "0.5rem", marginRight: "0.5rem" }}
      />
      <button onClick={adicionarUsuario} style={{ padding: "0.5rem" }}>
        Adicionar
      </button>
      <ul>
        {usuarios.map((user, index) => (
          <li key={index}>{user}</li>
        ))}
      </ul>
    </div>
  );
}

export default App; */








// App.jsx
import { useState } from "react";
import Modal from "./components/modal.jsx";
import TarefaCard from "./components/taskcard.jsx";

const categoriasIniciais = ["Trabalho", "Estudos", "Pessoal"];

export default function App() {
  const [tarefas, setTarefas] = useState([]); // Lista de tarefas
  const [busca, setBusca] = useState(""); // Campo de busca
  const [filtroCategoria, setFiltroCategoria] = useState("Todas"); // Categoria selecionada
  const [categorias, setCategorias] = useState(categoriasIniciais); // Lista de categorias
  const [mostrarModal, setMostrarModal] = useState(false); // Controle de visibilidade do modal
  const [editarTarefa, setEditarTarefa] = useState(null); // Tarefa que est√° sendo editada

  // Filtra as tarefas por categoria e busca
  const tarefasFiltradas = tarefas.filter((tarefa) => {
    const correspondeCategoria =
      filtroCategoria === "Todas" || tarefa.categoria === filtroCategoria;
    const correspondeBusca = tarefa.nome
      .toLowerCase()
      .includes(busca.toLowerCase());
    return correspondeCategoria && correspondeBusca;
  });

  // Salva ou atualiza uma tarefa
  const salvarTarefa = (novaTarefa) => {
    if (editarTarefa) {
      setTarefas((tarefas) =>
        tarefas.map((t) => (t.id === editarTarefa.id ? novaTarefa : t))
      );
    } else {
      setTarefas((tarefas) => [...tarefas, novaTarefa]);
    }
    setEditarTarefa(null);
    setMostrarModal(false); // Fecha o modal
  };

  // Exclui uma tarefa da lista
  const excluirTarefa = (id) => {
    setTarefas((tarefas) => tarefas.filter((t) => t.id !== id));
  };

  // Alterna o status de conclu√≠da de uma tarefa
  const alternarConclusao = (id) => {
    setTarefas((tarefas) =>
      tarefas.map((t) =>
        t.id === id ? { ...t, concluida: !t.concluida } : t
      )
    );
  };

  return (
    <div className="p-6 max-w-3xl mx-auto bg-white shadow rounded-xl">
      <h1 className="text-3xl font-bold mb-6 text-center text-gray-800">
        Lista de Tarefas
      </h1>

      {/* Barra de busca e bot√£o de nova tarefa */}
      <div className="flex gap-2 mb-6">
        <input
          type="text"
          placeholder="Buscar tarefa..."
          value={busca}
          onChange={(e) => setBusca(e.target.value)}
          className="flex-1 border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
        <button
          className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded transition"
          onClick={() => {
            setEditarTarefa(null);
            setMostrarModal(true);
          }}
        >
          Nova Tarefa
        </button>
      </div>

      {/* Filtros por categoria */}
      <div className="flex gap-2 flex-wrap mb-6">
        <button
          onClick={() => setFiltroCategoria("Todas")}
          className={`px-4 py-1 rounded border ${
            filtroCategoria === "Todas" ? "bg-blue-500 text-white" : "bg-gray-100 text-gray-800"
          }`}
        >
          Todas
        </button>
        {categorias.map((cat) => (
          <button
            key={cat}
            onClick={() => setFiltroCategoria(cat)}
            className={`px-4 py-1 rounded border ${
              filtroCategoria === cat ? "bg-blue-500 text-white" : "bg-gray-100 text-gray-800"
            }`}
          >
            {cat}
          </button>
        ))}
      </div>

      {/* Lista de tarefas */}
      <div className="grid gap-4">
        {tarefasFiltradas.map((tarefa) => (
          <TarefaCard
            key={tarefa.id}
            tarefa={tarefa}
            onEditar={() => {
              setEditarTarefa(tarefa);
              setMostrarModal(true);
            }}
            onExcluir={() => excluirTarefa(tarefa.id)}
            onToggle={() => alternarConclusao(tarefa.id)}
          />
        ))}
      </div>

      {/* Modal para criar ou editar tarefas */}
      {mostrarModal && (
        <Modal
          onClose={() => {
            setMostrarModal(false);
            setEditarTarefa(null);
          }}
          onSave={salvarTarefa}
          categorias={categorias}
          setCategorias={setCategorias}
          tarefaEdicao={editarTarefa}
        />
      )}
    </div>
  );
}
























